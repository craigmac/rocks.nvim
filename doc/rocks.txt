==============================================================================
Table of Contents                                               *rocks.contents*

rocks.nvim ························································ |rocks.nvim|
rocks.nvim commands ··········································· |rocks.commands|
rocks.nvim configuration ········································ |rocks.config|
Lua API for rocks.nvim extensions ·································· |rocks.api|
rocks.nvim API hooks ········································· |rocks.api.hooks|
rocks.nvim logging API ············································· |rocks.log|

==============================================================================
rocks.nvim                                                          *rocks.nvim*


A luarocks plugin manager for Neovim.


==============================================================================
rocks.nvim commands                                             *rocks.commands*


 `:Rocks[!] {command {args?}}`

 command	  	                     action
------------------------------------------------------------------------------

 install {rock} {version?} {args[]?} Install {rock} with optional {version} and optional {args[]}.
                                     Example: ':Rocks install neorg 8.0.0 opt=true'
                                     args (optional):
                                       - opt={true|false}
                                         Rocks that have been installed with 'opt=true'
                                         can be sourced with |packadd|.
                                       - pin={true|false}
                                         Rocks that have been installed with 'pim=true'
                                         will be ignored by ':Rocks update'.
 prune {rock}                        Uninstall {rock} and its stale dependencies,
                                     and remove it from rocks.toml.
 sync                                Synchronize installed rocks with rocks.toml.
                                     It may take more than one sync to prune all rocks that can be pruned.
 update                              Search for updated rocks and install them.
 edit                                Edit the rocks.toml file.
 pin {rock}                          Pin {rock} to the installed version.
                                     Pinned rocks are ignored by ':Rocks update'.
 unpin {rock}                        Unpin {rock}.
 log                                 Open the log file.


==============================================================================
rocks.nvim configuration                                          *rocks.config*


 rocks.nvim configuration options

>
 ---@type RocksOpts
 vim.g.rocks_nvim
<


RocksOpts                                                            *RocksOpts*

    Fields: ~
        {rocks_path?}                     (string)   Local path in your filesystem to install rocks. Defaults to a `rocks` directory in `vim.fn.stdpath("data")`.
        {config_path?}                    (string)   Rocks declaration file path. Defaults to `rocks.toml` in `vim.fn.stdpath("config")`.
        {luarocks_binary?}                (string)   Luarocks binary path. Defaults to `{rocks_path}/bin/luarocks`.
        {lazy?}                           (boolean)  Whether to query luarocks.org lazily. Defaults to `false`. Setting this to `true` may improve startup time, but features like auto-completion will lag initially.
        {dynamic_rtp?}                    (boolean)  Whether to automatically add freshly installed plugins to the 'runtimepath'. Defaults to `true` for the best default experience.
        {generate_help_pages?}            (boolean)  Whether to re-generate plugins help pages after installation/upgrade.
        {reinstall_dev_rocks_on_update?}  (boolean)  Whether to reinstall 'dev' rocks on update (Default: `true`, as rocks.nvim cannot determine if 'dev' rocks are up to date).
        {enable_luarocks_loader?}         (boolean)  Whether to use the luarocks loader to support multiple dependencies (Default: `true`)
        {luarocks_config?}                (string)   Path to the luarocks config. If not set, rocks.nvim will create one in `rocks_path`. Warning: You should include the settings in the default luarocks-config.lua before overriding this.


==============================================================================
Lua API for rocks.nvim extensions                                    *rocks.api*


The Lua API for rocks.nvim.
Intended for use by modules that extend this plugin.


rock_name                                                            *rock_name*

    Type: ~
        string


Rock                                                                      *Rock*

    Fields: ~
        {name}     (rock_name)
        {version}  (string)


api.try_get_cached_rocks()                            *api.try_get_cached_rocks*
    Tries to get the cached rocks.
    Returns an empty list if the cache has not been populated
    or no connection to luarocks.org can be established.
    Will spawn an async task to attempt to populate the cache
    if it is not ready.

    Returns: ~
        (table<rock_name,Rock[]>)  rocks


api.query_luarocks_rocks({callback})                  *api.query_luarocks_rocks*
    Queries luarocks.org for rocks and passes the rocks
    to a callback. Invokes the callback with an empty table
    if no rocks are found or no connection to luarocks.org can be established.

    Parameters: ~
        {callback}  (fun(rocks:table<rock_name,Rock[]>))  @async


FuzzyFilterOpts                                                *FuzzyFilterOpts*

    Fields: ~
        {sort?}  (boolean)  Whether to sort the results (default: `true`).


                                                     *api.fuzzy_filter_rock_tbl*
api.fuzzy_filter_rock_tbl({rock_tbl}, {query}, {opts?})
    @generic T

    Parameters: ~
        {rock_tbl}  (table<rock_name,T>)
        {query}     (string)
        {opts?}     (FuzzyFilterOpts)

    Returns: ~
        (table<rock_name,T>)


api.query_installed_rocks({callback})                *api.query_installed_rocks*
    Query for installed rocks.
    Passes the installed rocks (table indexed by name) to a callback when done.

    Parameters: ~
        {callback}  (fun(rocks:table<rock_name,Rock>))  @async


api.get_rocks_toml_path()                              *api.get_rocks_toml_path*
    Gets the rocks.toml file path.
    Note that the file may not have been created yet.

    Returns: ~
        (string)  rocks_toml_file_path


RockSpec                                                              *RockSpec*


        { name: rock_name, version?: string, opt?: boolean, pin?: boolean, [string]: V }

Specification for a rock in rocks.toml. May be extended by external modules.

RocksToml                                                            *RocksToml*


        { rocks?: table<string, RockSpec[]>, plugins?: table<string,RockSpec[]>, [string]: V }

Content of rocks.toml

api.get_rocks_toml()                                        *api.get_rocks_toml*
    Returns a table with the parsed rocks.toml file.
    If the file doesn't exist a file with the default configuration will be created.

    Returns: ~
        (RocksToml)


api.get_user_rocks()                                        *api.get_user_rocks*
    Returns a table with the rock specifications parsed from the rocks.toml file.
    If the file doesn't exist a file with the default configuration will be created.

    Returns: ~
        (table<rock_name,RockSpec>)


RocksCmd                                                              *RocksCmd*

    Fields: ~
        {impl}       (fun(args:string[],opts:vim.api.keyset.user_command))  The command implementation
        {complete?}  (fun(subcmd_arg_lead:string):string[])                 Command completions callback, taking the lead of the subcommand's arguments


                                                 *api.register_rocks_subcommand*
api.register_rocks_subcommand({name}, {cmd})
    Register a `:Rocks` subcommand.

    Parameters: ~
        {name}  (string)    The name of the subcommand to register
        {cmd}   (RocksCmd)


rock_config_table                                            *rock_config_table*

    Type: ~
        table<rock_name,RockSpec|rock_version>


rock_version                                                      *rock_version*

    Type: ~
        string


MutRocksTomlRef                                                *MutRocksTomlRef*

    Fields: ~
        {rocks?}    (rock_config_table)
        {plugins?}  (rock_config_table)


        { rocks?: rock_config_table, plugins?: rocks_command_tbl, [string]: V }

A mutable Lua representation of rocks.toml. May be extended by external modules.

rock_handler_callback                                    *rock_handler_callback*

    Type: ~
        fun(report_progress:fun(message:string),report_error:fun(message:string))


An async callback that handles an operation on a rock.

RockHandler                                                        *RockHandler*

    Fields: ~
        {get_sync_callback?}     (fun(spec:RockSpec):rock_handler_callback|nil)                                 Return a function that installs or updates the rock, or `nil` if the handler cannot or does not need to sync the rock.
        {get_prune_callback?}    (fun(specs:table<rock_name,RockSpec>):rock_handler_callback|nil)               Return a function that prunes unused rocks, or `nil` if the handler cannot or does not need to prune any rocks.
        {get_install_callback?}  (fun(rocks_toml:MutRocksTomlRef,arg_list:string[]):rock_handler_callback|nil)  Return a function that installs a rock, or `nil` if the handler cannot install this rock. The `rocks_toml` table is mutable, and should be updated with the installed rock by the returned callback.
        {get_update_callbacks?}  (fun(rocks_toml:MutRocksTomlRef):rock_handler_callback[])                      Return a list of functions that update user rocks, or an empty list if the handler cannot or does not need to update any rocks. The `rocks_toml` table is mutable, and should be updated by the returned callbacks.


api.register_rock_handler({handler})                 *api.register_rock_handler*

    Parameters: ~
        {handler}  (RockHandler)


api.source_runtime_dir()                                *api.source_runtime_dir*
    @deprecated Use the rtp.nvim luarock


                                                                   *api.install*
api.install({rock_name}, {version?}, {callback?})
    Invoke ':Rocks install' with a callback

    Parameters: ~
        {rock_name}  (rock_name)       #The rock name
        {version?}   (string)          The version of the rock to use
        {callback?}  (fun(rock:Rock))  Invoked upon successful completion


==============================================================================
rocks.nvim API hooks                                           *rocks.api.hooks*


Hooks that rocks.nvim modules can inject behaviour into.
Intended for use by modules that extend this plugin.



 |preload|
 By providing a module with the pattern, `rocks-<extension>.rocks.hooks.preload`,
 rocks.nvim modules can execute code before rocks.nvim loads any plugins
 (but after they have been added to the runtimepath).

 To be able to use this feature, a rocks.nvim extension *must* be named with a 'rocks-'
 prefix.


==============================================================================
rocks.nvim logging API                                               *rocks.log*


The logging interface for rocks.nvim.
Intended to be used by external modules.


log.trace()                                                          *log.trace*


log.debug()                                                          *log.debug*


log.info()                                                            *log.info*


log.warn()                                                            *log.warn*


log.error()                                                          *log.error*


vim:tw=78:ts=8:noet:ft=help:norl:
